version: '3.5'

services:  
  proxy:
    container_name: tt-proxy
    restart: unless-stopped
    volumes:
      - ../data:/data
      - ../data/nginx/etc/nginx:/etc/nginx
      - ../data/certbot/etc/letsencrypt:/etc/letsencrypt
      - ../data/shared/var/www/static:/var/www/static
    build:
      context: .
      dockerfile: proxy/Dockerfile
    networks:
      - main      
    ports:
      - "80:80"
      - "443:443"
    links:
      - vault
      - tt-web
    environment:
      - domain=$domain
      - vault_domain=$vault_domain
      - web_domain=$web_domain
      - web_staging_domain=$web_staging_domain
      - certbot_email=$certbot_email
  certbot:
    container_name: tt-certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ../app-certbot:/app
      - ../data:/data
      - ../data/certbot/etc/letsencrypt:/etc/letsencrypt
      - ../data/shared/var/www/static:/var/www/static
    depends_on: 
      - proxy
    networks:
      - main      
    environment:
      - domain=$domain
      - vault_domain=$vault_domain
      - web_domain=$web_domain
      - web_staging_domain=$web_staging_domain
      - certbot_email=$certbot_email
    entrypoint: /bin/sh -c "
        if [ $tweb_environment == 'production' ] ;
        then export certbot_test_cert_flag='' ;
        else export certbot_test_cert_flag='--test-cert' ;
        fi ;
        while true; 
        do
          if [ -s /etc/letsencrypt/live/primary_domain/privkey.pem ] ; 
            then echo 'Certificates exist, attempting renewal...' ; 
              certbot renew $certbot_test_cert_flag ; 
            else echo 'Certificates do not exist, getting certificates for the first time...'; 
              certbot certonly $certbot_test_cert_flag --webroot --webroot-path /var/www/static --cert-name primary_domain --domain $web_domain --domain $web_staging_domain --domain $vault_domain -n --agree-tos -m $certbot_email ; 
            fi ;
            cp /etc/letsencrypt/live/primary_domain/privkey.pem /data/privkey.pem 
            && cp /etc/letsencrypt/live/primary_domain/fullchain.pem /data/fullchain.pem 
            && date > /data/certbot_certificates_copied.txt ;
            echo 'Sleep for 12 hours...' ;
            sleep 12h ;
        done"
  vault:
    container_name: tt-vault
    restart: always
    build:
      context: .
      dockerfile: vault/Dockerfile
    networks:
      - main
    volumes:
      - ../data/vault/certs:/vault/certs
      - ../data/vault/logs:/vault/logs
      - ../data/vault/file:/vault/file
      - ../data/vault/config:/vault/config
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -config=/vault/config/vault.json
  cron:
    container_name: tt-cron
    restart: unless-stopped
    build:
      context: ./cron
    entrypoint: ""
    user: root
    command: crond -f -d 8
    networks:
      - main    
  tt-web:
    container_name: tt-web
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./Web/MainSite/Dockerfile
    volumes:
      - "${DataVolume}:/data"
    networks:
      - main  
    ports:
      - "127.0.0.1:5000:5000"
    depends_on:
      - db
    environment:
      - ASPNETCORE_URLS=$ASPNETCORE_URLS
      - ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT
      - ASPNETCORE_HOSTINGSTARTUPASSEMBLIES=Microsoft.AspNetCore.ApplicationInsights.HostingStartup
      - APPLICATIONINSIGHTS_CONNECTION_STRING=$APPLICATIONINSIGHTS_CONNECTION_STRING
      - Authentication:Google:ClientId=$GoogleClientId
      - Authentication:Google:ClientSecret=$GoogleClientSecret
      - ConnectionStrings:MainDbContextConnection=$MainDbContextConnection
      - Users=$Users
      - AuthorizedUsers=$AuthorizedUsers
      - AdminUsers=$AdminUsers
      - Authentication:Microsoft:ClientSecret=$MicrosoftClientSecret
      - Authentication:Microsoft:ClientId=$MicrosoftClientId
      - AlbaHost=$AlbaHost
      - AlbaUser=$AlbaUser
      - AlbaPassword=$AlbaPassword
      - AlbaAccount=$AlbaAccount
      - LetsEncrypt:Email=$LetsEncryptEmail
      - LetsEncrypt:UseStaging=$LetsEncryptUseStaging
      - LetsEncrypt:Domains=$LetsEncryptDomains
      - LetsEncrypt:CountryName=$LetsEncryptCountryName
      - LetsEncrypt:Locality=$LetsEncryptLocality
      - LetsEncrypt:Organization=$LetsEncryptOrganization
      - LetsEncrypt:OrganizationUnit=$LetsEncryptOrganizationUnit
      - LetsEncrypt:State=$LetsEncryptState
      - DataVolume=$DataVolume
      - HttpPort=$HttpPort
      - SslPort=$SslPort
      - NoSsl=$NoSsl
      - UrlShortenerDomain=$UrlShortenerDomain
      - AzureAppId=$AzureAppId
      - AzureClientSecret=$AzureClientSecret
      - TT_AreaNames=$TT_AreaNames
      - CompletionMapUrl=$CompletionMapUrl
      - AuthMessageSender:SendGridUser
      - AuthMessageSender:SendGridKey
      - AuthMessageSender:AuthEmailFromEmailAddress
      - AuthMessageSender:AuthEmailFromName
      - AuthMessageSender:AuthEmailTo
      - AuthMessageSender:PurchaseManager
      - AuthMessageSender:BuyerEmail
      - HOST_NAME=$HOST_NAME
  tt-web-test:
    container_name: tt-web-test
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./Web/MainSite/Dockerfile
    volumes:
      - "${DataVolume}:/data"
    networks:
      - main  
    ports:
      - "6000:6000"
    depends_on:
      - db
    environment:
      - ASPNETCORE_URLS=$ASPNETCORE_URLS
      - ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT
      - APPLICATIONINSIGHTS_CONNECTION_STRING=$APPLICATIONINSIGHTS_CONNECTION_STRING
      - ASPNETCORE_HOSTINGSTARTUPASSEMBLIES=Microsoft.AspNetCore.ApplicationInsights.HostingStartup
      - Authentication:Google:ClientId=$GoogleClientId
      - Authentication:Google:ClientSecret=$GoogleClientSecret
      - ConnectionStrings:MainDbContextConnection=$MainDbContextConnection
      - Users=$Users
      - AuthorizedUsers=$AuthorizedUsers
      - AdminUsers=$AdminUsers
      - Authentication:Microsoft:ClientSecret=$MicrosoftClientSecret
      - Authentication:Microsoft:ClientId=$MicrosoftClientId
      - AlbaHost=$AlbaHost
      - AlbaUser=$AlbaUser
      - AlbaPassword=$AlbaPassword
      - AlbaAccount=$AlbaAccount
      - LetsEncrypt:Email=$LetsEncryptEmail
      - LetsEncrypt:UseStaging=$LetsEncryptUseStaging
      - LetsEncrypt:Domains=$LetsEncryptDomains
      - LetsEncrypt:CountryName=$LetsEncryptCountryName
      - LetsEncrypt:Locality=$LetsEncryptLocality
      - LetsEncrypt:Organization=$LetsEncryptOrganization
      - LetsEncrypt:OrganizationUnit=$LetsEncryptOrganizationUnit
      - LetsEncrypt:State=$LetsEncryptState
      - DataVolume=$DataVolume
      - HttpPort=$HttpPort
      - SslPort=$SslPort
      - NoSsl=$NoSsl
      - UrlShortenerDomain=$UrlShortenerDomain
      - AzureAppId=$AzureAppId
      - AzureClientSecret=$AzureClientSecret
      - TT_AreaNames=$TT_AreaNames
      - CompletionMapUrl=$CompletionMapUrl
      - AuthMessageSender:SendGridUser=$AuthMessageSender_SendGridUser
      - AuthMessageSender:SendGridKey=$AuthMessageSender_SendGridKey
      - AuthMessageSender:AuthEmailFromEmailAddress=$AuthMessageSender_AuthEmailFromEmailAddress
      - AuthMessageSender:AuthEmailFromName=$AuthMessageSender_AuthEmailFromName
      - AuthMessageSender:AuthEmailTo=$AuthMessageSender_AuthEmailTo
      - HOST_NAME=$HOST_NAME
  db:
    container_name: tt-db
    image: "mcr.microsoft.com/mssql/server:2017-latest"
    restart: always
    volumes:
      - "${DataVolume}/db:/var/opt/mssql"
    environment:
      - MSSQL_PID=Express
      - ACCEPT_EULA=Y
      - SA_PASSWORD=$SA_PASSWORD
    networks:
      - main
    ports:
      - "1433:1433"
  tt-url:
    container_name: tt-url
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./Web/UrlShortener/Dockerfile
    networks:
      - main
    ports:
      - "5016:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT
      - UrlShortenerDbConnectionString=$ConnectionStrings_UrlShortenerDb      
  tt-url-test:
    container_name: tt-url-test
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./Web/UrlShortener/Dockerfile
    networks:
      - main
    ports:
      - "6010:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT
      - UrlShortenerDbConnectionString=$ConnectionStrings_UrlShortenerDb      
    

networks:
  main:
    name: tt-network